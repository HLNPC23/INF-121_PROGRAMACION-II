# -*- coding: utf-8 -*-
"""Introduccion a POO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vFJNSHdcmrv93Nv1rq1C8WzNHq6FgZKS
"""

class Bus:
    def __init__(self, nroAsientos, pasajero):
        self.nroAsientos = nroAsientos
        self.pasajero = pasajero

    def subirPasajero(self, x):
        if self.pasajero + x <= self.nroAsientos:
            self.pasajero += x
            print(f"Subieron {x} pasajeros.")
        else:
            espacio = self.nroAsientos - self.pasajero
            self.pasajero += espacio
            print(f"Subieron {espacio} pasajeros. El bus está lleno")

    def cobrar_pasaje(self):
        pasaje = self.pasajero * 1.50
        print(f"El total a cobrar es: Bs. {pasaje:.1f}")

    def asientosDisponibles(self):
        disponibles = self.nroAsientos - self.pasajero
        print(f"Hay {disponibles} asientos disponibles")


def main():
    a = Bus(50, 0)
    a.subirPasajero(10)
    a.cobrar_pasaje()
    a.asientosDisponibles()


if __name__ == "__main__":
    main()

class Producto:
  def __init__(self, nombre, precio, stock):
    self.nombre = nombre
    self.precio = precio
    self.stock = stock
  def vender(self, cantidad):
    if cantidad <= self.stock:
      self.stock -= cantidad
      print(f"Se vendieron {cantidad} unidades de {self.nombre}")
    else:
      print(f"No hay suficiente stock de {self.nombre} para vender {cantidad} unidades")
  def reabastecer(self, cantidad):
    self.stock += cantidad
    print(f"Se reabastecieron {cantidad} unidades de {self.nombre}")


  def main():
    b = Producto("Galleta", 4.0, 6)
    c = Producto("Papas", 6.0, 10)
    b.vender(4)
    b.vender(5)
    c.vender(5)
    b.reabastecer(1)
    c.reabastecer(4)


  if __name__ == "__main__":
    main()

class Persona:
  def __init__(self, nombre, paterno, materno, edad, ci):
    self.nombre = nombre
    self.paterno = paterno
    self.materno = materno
    self.edad = edad
    self.ci = ci
  def mostrarDatos(self):
    print(f"Nombre: {self.nombre}")
    print(f"Apellido Paterno: {self.paterno}")
    print(f"Apellido Materno: {self.materno}")
    print(f"Edad: {self.edad}")
    print(f"CI: {self.ci}")
  def mayorEdad(self):
    if self.edad >= 18:
      print(f"{self.nombre} es mayor de edad")
    else:
      print(f"{self.nombre} es menor de edad")
  def modificarEdad(self, nueva):
    self.edad = nueva
    print(f"La edad de {self.nombre} ha sido modificada a {self.edad}")
  def verificarApellidoPaterno(self, a):
    if self.paterno == a.paterno:
        print(f"{self.nombre}, no tiene el mismo apellido paterno que {a.nombre}")
    else:
        print(f"{self.nombre}, no tiene el mismo apellido paterno que {a.nombre}.")



def main():
  a = Persona("Sol", "Monte", "Torrez", 18, 12345678)
  b = Persona("Diana", "Luna", "Sosa", 15, 87654321)
  a.mostrarDatos()
  b.mostrarDatos()
  a.mayorEdad()
  b.mayorEdad()
  a.modificarEdad(20)
  a.verificarApellidoPaterno(b)

if __name__ == "__main__":
  main()

class Mascota:
    def __init__(self, nombre, tipo, energia):
        self.nombre = nombre
        self.tipo = tipo
        self.energia = energia

    def alimentar(self):
        if self.energia < 100:
            aumento = min(20, 100 - self.energia)
            self.energia += aumento
            print(f"{self.nombre} fue alimentado. Energía actual: {self.energia}")
        else:
            print(f"{self.nombre} ya tiene energía completa ({self.energia})")

    def jugar(self):
        if self.energia >= 15:
            self.energia -= 15
            print(f"{self.nombre} jugó. Energía actual: {self.energia}")
        else:
            print(f"{self.nombre} está muy cansado para jugar. Energía actual: {self.energia}")


def main():
    a = Mascota("Terry", "Perro", 20)
    b = Mascota("Yuky", "Gato", 50)
    a.alimentar()
    b.alimentar()
    a.jugar()
    b.jugar()



if __name__ == "__main__":
    main()

class Cliente:
    def __init__(self, nombre, pedido):
        self.nombre = nombre
        self.pedido = pedido

    def __del__(self):
        print(f"Cliente {self.nombre} ha salido de la cafetería.")

    def get_nombre(self):
        return self.nombre

    def set_nombre(self, nuevo_nombre):
        self.nombre = nuevo_nombre

    def get_pedido(self):
        return self.pedido

    def set_pedido(self, nuevo_pedido):
        self.pedido = nuevo_pedido


class Pedido:
    def __init__(self, producto, costo, estado):
        self.producto = producto
        self.costo = costo
        self.estado = estado

    def __del__(self):
        print(f"Pedido {self.producto} ha sido entregado exitosamente.")

    def get_producto(self):
        return self.producto

    def set_producto(self, nuevo_producto):
        self.producto = nuevo_producto

    def get_costo(self):
        return self.costo

    def set_costo(self, nuevo_costo):
        self.costo = nuevo_costo

    def get_estado(self):
        return self.estado

    def set_estado(self, nuevo_estado):
        self.estado = nuevo_estado


def main():
    a = Cliente("Diana", Pedido("Café", 15.0, "Pendiente"))
    print(f"Cliente: {a.get_nombre()}")
    print(f"Pedido: {a.get_pedido().get_producto()}")

    b = Cliente("Juan", Pedido("Té", 10.0, "Pendiente"))
    print(f"Cliente: {b.get_nombre()}")
    print(f"Pedido: {b.get_pedido().get_producto()}")


if __name__ == "__main__":
    main()

class Fruta:
    def __init__(self, nombre="Kiwi", tipo="Subtropical", nroVitaminas=3, v=["K", "C", "E"]):  # M1
        self.nombre = nombre
        self.tipo = tipo
        self.nroVitaminas = nroVitaminas
        self.v = v

    def get_nombre(self):
        return self.nombre

    def get_tipo(self):
        return self.tipo

    def get_nroVitaminas(self):
        return self.nroVitaminas

    def get_v(self):
        return self.v

    def __str__(self):
        return f"{self.nombre} ({self.tipo}) - Vitaminas: {self.v}"


def masVitaminas(lista_frutas):
    return max(lista_frutas, key=lambda fruta: fruta.get_nroVitaminas())


def main():
    a = Fruta("Naranja", "Cítrica", 3, ["A", "B", "C"])  # M2
    print(a)

    nombre = "Manzana"
    tipo = "No cítrica"
    vitaminas = ["A", "E"]
    b = Fruta(nombre, tipo, len(vitaminas), vitaminas)  # M3
    print(b)
    c = Fruta()
    print(c)

    frutas = [a, b, c]

    f_mas = masVitaminas(frutas)
    print(f"La fruta con más vitaminas es: {f_mas.get_nombre()} con {f_mas.get_nroVitaminas()} vitaminas")


if __name__ == "__main__":
    main()

class Buzon:
    def __init__(self, nro, nroC, c):
        self.nro = nro
        self.nroC = nroC
        self.c = c

    def contarCartasPara(self, x):
        c = 0
        for carta in self.c:
            if x in carta.descripcion or x in carta.codigo:
                c += 1
        return c

    def eliminarCartas(self, x):
        self.c = [carta for carta in self.c if carta.codigo != x]

    @staticmethod
    def mostrarRemitentesConCartas(buzones):
        for b in buzones:
            if len(b.c) > 0:
                print(f"El remitente {b.nroC} ha enviado cartas al destinatario {b.nro}")

    def buscarPalabraClave(self, p):
        resultados = []
        for carta in self.c:
            if p.lower() in carta.descripcion.lower():
                resultados.append(carta)
        return resultados


def mostrarCoincidencias(buzones, palabra):
    print(f"\nCartas que contienen la palabra clave '{palabra}':\n")
    for buz in buzones:
        coincidencias = buz.buscarPalabraClave(palabra)
        for carta in coincidencias:
            print(f"Código: {carta.codigo} | Remitente: {buz.nroC} | Destinatario: {buz.nro}")


class Carta:
    def __init__(self, codigo, descripcion):
        self.codigo = codigo
        self.descripcion = descripcion


def main():
    a = Carta("c456", "Querido amigo te escribo para decirte que ella no te ama por lo tanto me fui con ella.")
    b = Carta("a010", "Marco")
    c = Carta("c123", "Invitación para Juan al compromiso.")

    d = Buzon("001", "002", [a, c])
    e = Buzon("002", "001", [b])
    f = Buzon("003", "004", [a, c])
    g = Buzon("004", "003", [b])

    buzones = [d, e, f, g]

    # Inciso e
    Buzon.mostrarRemitentesConCartas(buzones)

    # Inciso f
    palabra = "amor"
    print(f"\nBuscando la palabra clave '{palabra}'...\n")
    for buz in buzones:
        coincidencias = buz.buscarPalabraClave(palabra)
        for carta in coincidencias:
            print(f"- Código: {carta.codigo}, Remitente: {buz.nroC}, Destinatario: {buz.nro}")

    # Inciso c
    print("\nCartas Para Juan:", d.contarCartasPara("Juan"))

    # Inciso d
    print("\nCartas antes de eliminar:")
    for carta in d.c:
        print("-", carta.codigo)

    d.eliminarCartas("c456")

    print("Cartas después de eliminar:")
    for carta in d.c:
        print("-", carta.codigo)

    # Inciso g
    mostrarCoincidencias(buzones, "amor")


if __name__ == "__main__":
    main()