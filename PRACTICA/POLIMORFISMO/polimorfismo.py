# -*- coding: utf-8 -*-
"""Polimorfismo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BC7_Av5tyEbRhJZCKl_g-PCMC_M1zgek
"""

class Videojuego:
    def __init__(self, nombre=None, plataforma=None, jugadores=0):
        if nombre is None and plataforma is None:
            self.nombre = "Desconocido"
            self.plataforma = "Desconocida"
        elif plataforma is None:
            self.nombre = nombre
            self.plataforma = "Desconocida"
        else:
            self.nombre = nombre
            self.plataforma = plataforma
        self.jugadores = jugadores

    def agregarJugadores(self, cantidad=None):
        if cantidad is None:
            self.jugadores += 1
        else:
            self.jugadores += cantidad

    def __str__(self):
        return f"{self.nombre} en {self.plataforma} con {self.jugadores} jugadores"


def main():
    a = Videojuego("Mario Bros", "NES", 1)
    b = Videojuego("Tetris", "PC", 1)
    c = Videojuego()
    print(a)
    print(b)
    print(c)

    a.agregarJugadores()
    print(a)

    b.agregarJugadores(2)
    print(b)


if __name__ == "__main__":
    main()

class Matriz:
    def __init__(self, filas=10, columnas=10, identidad=False):
        self.filas = filas
        self.columnas = columnas
        self.matriz = [[0.0 for _ in range(columnas)] for _ in range(filas)]
        if identidad:
            if filas == columnas:
                for i in range(filas):
                    self.matriz[i][i] = 1.0

    def sumar(self, otra):
        if self.filas != otra.filas or self.columnas != otra.columnas:
            raise ValueError("Las matrices deben tener las mismas dimensiones para sumar")
        resultado = Matriz(self.filas, self.columnas)
        for i in range(self.filas):
            for j in range(self.columnas):
                resultado.matriz[i][j] = self.matriz[i][j] + otra.matriz[i][j]
        return resultado

    def restar(self, otra):
        if self.filas != otra.filas or self.columnas != otra.columnas:
            raise ValueError("Las matrices deben tener las mismas dimensiones para restar")
        resultado = Matriz(self.filas, self.columnas)
        for i in range(self.filas):
            for j in range(self.columnas):
                resultado.matriz[i][j] = self.matriz[i][j] - otra.matriz[i][j]
        return resultado


    def igual(self, otra):
        if self.filas != otra.filas or self.columnas != otra.columnas:
            raise ValueError("Las matrices deben tener las mismas dimensiones para asignar")
        for i in range(self.filas):
            for j in range(self.columnas):
                self.matriz[i][j] = otra.matriz[i][j]

    def mostrar(self):
        for fila in self.matriz:
            print(fila)

def main():
  m1 = Matriz(10, 10, identidad=True)
  m2 = Matriz(10, 10)
  m2.matriz[0][0] = 5.0
  m3 = m1.sumar(m2)
  m3.mostrar()


if __name__ == "__main__":
    main()

class Celular:
  def __init__(self, nroTel, dueño, espacio, ram, nroApp):
    self.nroTel = nroTel
    self.dueño = dueño
    self.espacio = espacio
    self.ram = ram
    self.nroApp = nroApp
  def __str__(self):
        return (f"Tel: {self.nroTel}, Dueño: {self.dueño}, Espacio: {self.espacio}GB, "
                f"RAM: {self.ram}GB, NroApps: {self.nroApp}")

  def __iadd__(self, otro):
    if otro == 10:
      self.nroApp += 10
    return self

  def __isub__(self, otro):
    if otro == 5:
      self.nroApp -= 5
      if self.nroApp < 0:
        self.nroApp = 0
    return self


def main():
  a = Celular(123456789, "Helen", 64.0, 4.0, 20)
  print("Antes:")
  print(a)
  a += 10
  print("Después:")
  print(a)
  a -= 5
  print("Después:")
  print(a)

if __name__ == "__main__":
  main()

class Parada:
    def __init__(self, admins=None, autos=None, nombreP="Sin Nombre"):
        self.admins = admins if admins is not None else []
        self.autos = autos if autos is not None else []
        self.nombreP = nombreP
        self.nroAdmins = len(self.admins)
        self.nroAutos = len(self.autos)
    def mostrar(self):
        print(f"Parada: {self.nombreP}")
        print("Administradores:")
        for i, admin in enumerate(self.admins):
            print(f"  {i+1}. {admin}")
        print("Autos:")
        for i, auto in enumerate(self.autos):
            print(f"  {i+1}. Marca: {auto[0]}, Modelo: {auto[1]}, Placa: {auto[2]}")
    def adicionar(self, x, y=None, z=None):
        if y is None and z is None:
            self.admins.append(x)
            self.nroAdmins += 1
        else:
            self.autos.append((x, y, z))
            self.nroAutos += 1


def main():
    p1 = Parada()
    print("Antes:")
    p1.mostrar()
    p1.adicionar("Carlos")
    p1.adicionar("Lucía")
    p1.adicionar("Toyota", "Corolla", "ABC123")
    p1.adicionar("Honda", "Civic", "XYZ789")
    print("\nDespués:")
    p1.mostrar()

if __name__ == "__main__":
    main()

class Pasajero:
    def __init__(self, nombre, edad, genero):
        self.nombre = nombre
        self.edad = edad
        self.genero = genero

    def __str__(self):
        return f"{self.nombre}, {self.edad} años, Género: {self.genero}"

class Crucero:
    def __init__(self, nombre, paisOrigen, paisDestino):
        self.nombre = nombre
        self.paisOrigen = paisOrigen
        self.paisDestino = paisDestino
        self.pasajeros = []
        self.nroPasajeros = 0

    def __str__(self):
        return (f"Crucero {self.nombre} de {self.paisOrigen} a {self.paisDestino} "
                f"con {self.nroPasajeros} pasajeros.")

    def __iadd__(self, pasajero):
        self.pasajeros.append(pasajero)
        self.nroPasajeros += 1
        return self

    def __isub__(self, otro):
        print(f"Pasajeros del crucero {self.nombre}:")
        for i, p in enumerate(self.pasajeros):
            print(f"  {i+1}. {p}")
        return self

    def __eq__(self, otro):
        costo = self.nroPasajeros * 1000
        print(f"Total a pagar por todos los pasajes del crucero {self.nombre}: ${costo}")
        return costo

    def __add__(self, otro):
        if self.nroPasajeros == otro.nroPasajeros:
            print("Ambos cruceros tienen la misma cantidad de pasajeros.")
        else:
            print("Los cruceros tienen diferente cantidad de pasajeros.")
        return None

    def __sub__(self, otro):
        hombres = sum(1 for p in self.pasajeros if p.genero.upper() == 'M')
        mujeres = sum(1 for p in self.pasajeros if p.genero.upper() == 'F')
        print(f"En el crucero {self.nombre} hay {hombres} hombres y {mujeres} mujeres.")
        return None

class Pasajero:
  def __init__(self, nombre, edad, genero):
    self.nombre = nombre
    self.edad = edad
    self.genero = genero

  def __str__(self):
    return f"{self.nombre}, {self.edad} años, Género: {self.genero}"



def main():
  p1 = Pasajero("Ana", 30, "F")
  p2 = Pasajero("Luis", 45, "M")
  p3 = Pasajero("Carla", 28, "F")
  p4 = Pasajero("Pedro", 40, "M")
  p5 = Pasajero("Lucía", 35, "F")
  c1 = Crucero("Oceanic", "Brasil", "Italia")
  c2 = Crucero("Pacific", "Argentina", "España")
  c1 += p1
  c1 += p2
  c1 += p3
  c2 += p4
  c2 += p5
  c1 -= None
  c2 -= None
  c1 == None
  c2 == None
  c1 + c2
  c1 - None
  c2 - None




if __name__ == "__main__":
  main()

